I. Pre-requisites:

1. Client to AS DTLS PSK/RPK keys

==================Client1 (PSK)===================
0x61, 0x62, 0x63, 0x04, 0x05, 0x06, 0x07, 0x08,
0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10

psk-identity="client1"
==================================================

==================Client2 (PSK)===================
0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10

psk-identity="client2".
==================================================

==================Client3 (RPK)===================

{1: 2, 3: -7, -1: 1,
-2: h'12D6E8C4D28F83110A57D253373CAD52F01BC447E4093541F643B385E179C110',
-3: h'283B3D8D28FFA59FE5CB540412A750FA8DFA34F6DA69BCDA68400D679C1347E8',
-4: h'00A43BAA7ED22FF2699BA62CA4999359B146F065A95C4E46017CD25EB89A94AD29'}

Or human readable:
{
  kty: EC2,
  alg: ES256,
  crv: P-256,
  x: h'12D6E8C4D28F83110A57D253373CAD52F01BC447E4093541F643B385E179C110',
  y: h'283B3D8D28FFA59FE5CB540412A750FA8DFA34F6DA69BCDA68400D679C1347E8',
  d: h'00A43BAA7ED22FF2699BA62CA4999359B146F065A95C4E46017CD25EB89A94AD29',
}

NI id: "ni:///sha-256;xzLa24yOBeCkos3VFzD2gd83Urohr9TsXqY9nhdDN0w"
(see RFC 6920 section 3 for calculation of NI).
==================================================


==================Client4 (PSK)===================
0x51, 0x52, 0x53, 0x04, 0x05, 0x06, 0x07, 0x08,
0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10

psk-identity="client4".
==================================================


==================AS (RPK)==================

{1: 2, 3: -7, -1: 1,
-2: h'058F35F3C0D34D3DF50DEBC82208CDA9BE373AF7B8F7AAC381577B144D5FA781',
-3: h'364269649744067D4600A529AE12076750D90C5EFCD9835137DB1AE2B4BACCB8',
-4: h'0089A92D07B34F1D806FABFF444AF6507C5F18F47BB2CCFAA7FBEC447303790D53'}

ni:///sha-256;IBEnVrQfrLp5gRu5jPHz7ykvkIPc4iW0CGE8Av20Nvo
==================================================


==================RS2 (RPK)==================

{1: 2, 3: -7, -1: 1,
-2: h'73B7D755827D5D59D73FD4015D47B445762F7CDB59799CD966714AB2727F1BA5'
-3: h'1A84F5C82797643D33F7E6E6AFCF016522238CE430E1BF21A218E6B4DEEAC37A',
-4: h'00EA086573C683477D74EB7A0C63A6D031D5DEB10F3CC2876FDA6D3400CAA4E507'}

ni:///sha-256;sU09Kz-RXT8izVvD3n7v3d5vHVGF1NcYShZZ-oczcVE
==================================================

2. Shared keys between RS and AS

==================RS1==================
0xa1, 0xa2, 0xa3, 0x04, 0x05, 0x06, 0x07, 0x08,
0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10

keyId : "RS1".
=======================================

==================RS2==================
0xb1, 0xb2, 0xb3, 0x04, 0x05, 0x06, 0x07, 0x08,
0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10

keyId : "RS2".
=======================================

3. All Access Tokens are assumed to be encoded as CWTs protected with the
following COSE wrapper (COSE_Encrypt0):

16([h'A1010A', {5: <IV here>}, <ciphertext here>])

Or human readable:

16({alg: AES-CCM-16-64-128}, {iv: <IV here>}, <ciphertext here>])

4. Portnumbers, endpoint names, profiles

We will use the default CoAP-DTLS port: 5684 for tests with the DTLS profile
and the default CoAP port: 5683 for tests with other profiles.

The Token endpoint will be reachable under the URL <your-IP-address>/token
The Introspection endpoint will be reachable under the URL
<your-IP-address>/introspect. The Authz-info endpoint  will be reachable under
the URL <your-IP-address>/authz-info

We will use CoAP as communication protocol and the DTLS profile
(draft-ietf-ace-dtls-authorize) unless another is explicitly named in the test
description.

Note that we do not (yet) mandate tests based on the MTI ed25519 curve, due to
lack of widespread library support.

5. Resources and Scopes

We will use two resources at the RS with the following URLs and expected
behaviors:

A. HelloWorld.  This resource only supports the GET method, and returns the
CBOR string: "Hello World!", it shall be reachable under the URL
<your-IP-address>/ace/helloWorld.

The scope "HelloWorld" shall allow to perform GET on this resource, all
other methods should return a 4.05 (Method Not Allowed).

B. Lock. This resource supports GET and PUT. GET returns the state of the lock
as CBOR Boolean value, where True stands locked and False for unlocked. The PUT
method allows to send a CBOR Boolean state to the lock, that the resource shall
store, overwriting its current state. This resource shall be reachable under the
URL <your-IP-address>/ace/lock.

The scope "r_Lock" shall allow to perform GET on this resource.
The scope "rw_Lock" shall allow to perform GET and PUT on this resource.

6. Resource servers and clients

The tests include two resource servers RS1 and RS2, which both
provide the HelloWorld and Lock resources described above.

RS1 is identified as the singleton audience "RS1", and RS2 as the
singleton audience "RS2". Both only support the coap_dtls profile.
RS1 supports only the DTLS-PSK handshake, while RS2 supports
the DTLS-RPK and the DTLS-PSK handshake. RS1 supports transferring
access tokens to authz-info through the psk-identity in a handshake
as described in draft-ietf-ace-dtls-authorize-03#section-4.1 .

II. Tests

1. Token Endpoint Test

A client requests an access token at the token endpoint.

1.1 [AS, Client1]

Client1 establishes a DTLS connection to the AS using the DTLS-RPK handshake
without client authentication. The client then sends a request (can be random
bytes) to the token endpoint.

 C1.1 The request should be rejected with 4.01 (Unauthorized) or 4.00 (Bad
 Request) and error = invalid_client
 
1.2 [AS, Client1]

Client1 establishes a DTLS connection to the AS using the DTLS-PSK handshake
using the PSK "client1".
The client then sends a request (can be random bytes) to the token endpoint.
This client is not authorized to access the token endpoint (requires
configuration at the AS)

 C1.2 The request should be rejected with 4.00 (Bad Request) or 4.01
 (Unauthorized) and error = unauthorized_client
 
1.3 [AS, Client2]

Client2 establishes a DTLS connection to the AS using the DTLS-PSK handshake
using the PSK "client2".
The client then sends a request to the token endpoint containing the following
parameters (and missing the 'aud' parameter):
{
  18 : 2       //  grant_type : client credentials
  12 : "HelloWorld"  //  scope : HelloWorld
}
No default audience is specified for this client, but this client is authorized
to access the token endpoint.

 C1.3 The request should be rejected with 4.00 (Bad Request) and
 error = invalid_request. The AS MAY provide the explanation that the audience
 is missing.

1.4 [AS, Client2]

Client2  establishes a DTLS connection to the AS using the DTLS-PSK handshake
using the PSK "client2". The client then sends a request to the token endpoint containing the following parameters:
{
  18 : 0      //  grant_type : password
  12 : "HelloWorld"  //  scope : HelloWorld
   3 : "RS1"   //  aud : RS1
}
The client is authorized to access the token endpoint and is authorized
to request the scope "HelloWorld" on "RS1". The AS does not support the
grant type "password".

  C1.4 The request should be rejected with 4.00 (Bad Request) and
 error = unsupported_grant_type

1.5  [AS, Client2]

Client2  establishes a DTLS connection to the AS using the DTLS-PSK handshake
using the PSK "client2". The client then sends a request to the token endpoint
containing the following parameters:
{
  18 : 2       //  grant_type : client credentials
  12 : "test"  //  scope : test
   3 : "RS1"   //  aud : RS1
}

The client is authorized to access the token endpoint and is authorized
to request the scope "HelloWorld" on "RS1". The scope "test" is unknown to
the AS.

  C1.5 The request should be rejected with 4.00 (Bad Request) and
 error = invalid_scope

1.6 [AS, Client2]

Client2 establishes a DTLS connection to the AS using the DTLS-PSK handshake using the PSK "client2". The client then sends a request to the token
endpoint containing the following parameters:
{
  18 : 2      //  grant_type : client credentials
  12 : "HelloWorld"  //  scope : HelloWorld
   3 : "RS1"   //  aud : RS1
}
The client is authorized to access the token endpoint and is authorized
to request the scope "HelloWorld" on "RS1". Client2 and RS1 support
DTLS-PSK with 128-bit keys and the DTLS profile. The AS and RS1 share the key: "RS1" for encrypting the CWT.

 C1.6.1  The request should be granted and an access token and RS information
 returned. The access token should use the PSK "RS1" for the Encrypt0 wrapper
 C1.6.2 The token should contain the cnf claim containing a symmetric
 128-bit PSK generated by the AS, the token should also contain aud="RS1" and
 scope="HelloWorld".
 C1.6.3 The RS Information should contain the cnf claim with the same key
 as in the cnf claim of the token. The RS information MAY contain a profile
 claim (26 : 1  unabbreviated: profile : "coap_dtls").

1.7 [AS, Client2]

Client2 establishes a DTLS connection to the AS using the DTLS-PSK handshake
using the PSK "client2".

The client then sends a request to the token endpoint containing the following
parameters:
{
  18 : 2       //  grant_type : client credentials
  12 : "HelloWorld"  //  scope : HelloWorld
   3 : "RS1"   //  aud : RS1
  25 : {1:                               // cnf : { COSE_KEY : {
    {2: h'91ECB5CB5DBC',                 //   kid :  ....
     1: 4,                               //   kty : Symmetric
    -1: h'6162630405060708090A0B0C0D0E0F10' // Octet_K  : ...
    }       
  }
}
The client is authorized to access the token endpoint and is authorized
to request the scope "HelloWorld" on "RS1".

 C1.7 The request should be rejected with 4.00 (Bad Request) and
 error = invalid_request. The AS MAY provide the explanation that the
 client is not supposed to submit a symmetric confirmation key.

1.8 [AS, Client3]

Client3 establishes a DTLS connection to the AS using the DTLS-RPK handshake
using the RPK: "ni:///sha-256;xzLa24yOBeCkos3VFzD2gd83Urohr9TsXqY9nhdDN0w".
The client sends a request to the token endpoint containing the following
parameters (and missing the 'scope' parameter):
{
  18 : 2       //  grant_type : client credentials
  3  : "RS1"   //  aud : RS1
}
No default scope is specified for this client, but this client is authorized
to access the token endpoint.

 C1.8 The request should be rejected with 4.00 (Bad Request) and
 error = invalid_request. The AS MAY provide the explanation that the
 scope is missing.

1.9 [AS, Client3]

Client3 establishes a DTLS connection to the AS using the DTLS-RPK handshake
using the RPK: "ni:///sha-256;xzLa24yOBeCkos3VFzD2gd83Urohr9TsXqY9nhdDN0w".

The client sends a request to the token endpoint containing the following
parameters:
{
  18 : 2       //  grant_type : client credentials
  12 : "HelloWorld"  //  scope : HelloWorld
   3 : "RS1"   //  aud : RS1
  25 : {1:     // cnf : { COSE_KEY : {
    { 1: 2,    // kty : EC2,
      3: -7,   // alg : ES256,
      -1: 1,   // crv : P-256,
      -2: h'12D6E8C4D28F83110A57D253373CAD52   // x : ...
            F01BC447E4093541F643B385E179C110',
      -3: h'283B3D8D28FFA59FE5CB540412A750FA   // y : ...
            8DFA34F6DA69BCDA68400D679C1347E8'
    }       
  }
}
The client is authorized to access the token endpoint and is authorized
to request the scope "HelloWorld" on "RS1". The RS "RS1" is registered a the AS
and does not support DTLS-RPK.

 C1.9 The request should be rejected with 4.00 (Bad Request) and
 error = unsupported_pop_key

1.10 [AS, Client3]

Client3 establishes a DTLS connection to the AS using the DTLS-RPK handshake using the RPK: "ni:///sha-256;xzLa24yOBeCkos3VFzD2gd83Urohr9TsXqY9nhdDN0w". 

The client sends a request to the token endpoint containing the following
parameters:
{
  18 : 2       //  grant_type : client credentials
  12 : "HelloWorld"  //  scope : HelloWorld
   3 : "RS2"   //  aud : RS2
  25 : {1:     // cnf : { COSE_KEY : {
    { 1: 2,    // kty : EC2,
      3: -7,   // alg : ES256,
      -1: 1,   // crv : P-256,
      -2: h'12D6E8C4D28F83110A57D253373CAD52   // x : ...
            F01BC447E4093541F643B385E179C110',
      -3: h'283B3D8D28FFA59FE5CB540412A750FA   // y : ...
            8DFA34F6DA69BCDA68400D679C1347E8'
    }       
  }
}

The client is authorized to access the token endpoint and is authorized
to request the scope "HelloWorld" on "RS2". The RS "RS2" is registered a the AS
and does support DTLS-RPK. The public key of RS2 is:
ni:///sha-256;sU09Kz-RXT8izVvD3n7v3d5vHVGF1NcYShZZ-oczcVE.

AS and RS2 share symmetric key "RS2".

 C1.10.1 The request should be granted and an access token and
 	 RS information returned.  The access token should use the PSK
	 "RS2" for the Encrypt0 wrapper.
 C1.10.2 Check that the client authenticates to the AS in the RPK handshake
 C1.10.3 Check that cnf claim in the access token contains the client's raw
      public key
 C1.10.4 Check that the RS information contains the rs_cnf parameter,
      containing the RS's public key

1.11  [AS, Client4]

Client4 establishes a DTLS connection to the AS using the DTLS-PSK
handshake using the PSK "client4". The client then sends a request to the token
endpoint containing the following parameters:
{
  18 : 2      //  grant_type : client credentials
  12 : "rw_Lock"  //  scope : rw_Lock
   3 : "RS1"   //  aud : RS1
}

The client is authorized to access the token endpoint and is authorized
to request the scopes "HelloWorld" and "r_Lock" on "RS1". The AS and RS1 share the key: "RS1" for encrypting the CWT. Client4 is NOT authorized to request
the scope "rw_Lock".

C1.11 The request should be rejected with 4.00 (Bad Request) and
 error = invalid_scope.

1.12 [AS, Client4]

Client4 establishes a DTLS connection to the AS using the DTLS-RSK
handshake using the PSK "client4". The client then sends a request to the token
endpoint containing the following parameters:
{
  18 : 2      //  grant_type : client credentials
  12 : "r_Lock rw_Lock"  //  scope : r_Lock rw_Lock
   3 : "RS1"   //  aud : RS1
}

The client is authorized to access the token endpoint and is authorized
to request the scopes "HelloWorld" and "r_Lock" on "RS1". The AS and RS1 share the key: "RS1" for encrypting the CWT. Client4 is NOT authorized to request
the scope "rw_Lock".

C1.12.1 The request should be granted only for the scope "r_Lock"
C1.12.2 The RS information should include the parameter scope : "r_Lock"


2. RS tests

2.1 Unauthorized Resource Request [RS1, Client1]

Client1 that does not have an access token, no PSK or RPK tries to send a GET
request to the protected HelloWorld resource at RS1 using plain CoAP.

C2.1: Check that the client does not get access
C2.2: Check that the RS returns the AS information as specified in 5.1.2.

2.2 [RS1, Client1]

A client sends random bytes to the authz-info endpoint of RS1.

 C2.2 The request should be rejected with 4.01 (Unauthorized).

2.3 [RS1, Client1]

A client sends a CWT access token encrypted by the AS with the shared key
"RS2" to the authz-info endpoint of RS1.

Note: RS1 does not know the key "RS2".

 C2.3 The request should be rejected with 4.01 (Unauthorized).

2.4 [RS1, Client2]

Client2 sends a CWT access token encrypted by the AS with the
shared key "RS1" to the authz-info endpoint of RS1, containing the following
claims (diagnostic notation):

{
  aud : "RS2",
  iss : "AS",
  scope : "HelloWorld",
  cnf : {
      COSE_KEY : {
          kty : Symmetric,
	  kid : h'91ECB5CB5DBC',
	  Octet_K : h'6162630405060708090A0B0C0D0E0F10' //can be random bytes
       }
   }
}

Note: RS1 does not recognize the audience "RS2".

 C2.4 The request should be rejected with 4.03 (Forbidden).

2.5 [RS1, Client2]

Client2 sends a CWT access token encrypted with the shared key "RS1" by
the AS to the authz-info endpoint of RS1, containing the following claims
(diagnostic notation):

{
  aud : "RS1",
  iss : "AS",
  scope : "test",
  cnf : {
      COSE_KEY : {
          kty : Symmetric,
	  kid : h'91ECB5CB5DBC',
	  Octet_K : h'6162630405060708090A0B0C0D0E0F10' //can be random bytes
       }
   }
}

Note: RS1 does not recognize the scope "test".

 C2.5 The request should be rejected with 4.00 (Bad Request).

2.6 [RS1, Client2]

Client2 sends a CWT access token encrypted with the shared key "RS1" by
the AS to the authz-info endpoint of RS1, containing the following claims
(diagnostic notation):

{
  aud : "RS1",
  iss : "AS",
  scope : "HelloWorld",
  cnf : {
      COSE_KEY : {
          kty : Symmetric,
	  kid : h'91ECB5CB5DBC',
	  Octet_K : h'6162630405060708090A0B0C0D0E0F10' //can be random bytes
       }
   }
} 

 C2.6 The request should be processed and answered with a 2.01 (Created)

2.7 [RS1, Client2]

After having sent the token to RS1 in test 2.6, Client2 performs a DTLS-PSK
handshake with RS1 using the key-id: h'91ECB5CB5DBC' as psk-identity
(corresponding to the kid in the token from test 2.6). Then Client2 sends a GET
request to the HelloWorld resource at RS1.

 C2.7 The request is granted and the HelloWorld resource returns
  2.05 (Content) with the payload "HelloWorld!" as CBOR String.

2.8 [RS1, Client2]

After having sent the token to RS1 in test 2.6, Client2 performs a DTLS-PSK
handshake with RS1 using the key-id: h'91ECB5CB5DBC' as psk-identity
(corresponding to the kid in the token from test 2.6). Then Client2 sends a
PUT request to the Lock resource at RS1 with a CBOR payload of FALSE.

 C2.8 The request is denied with a 4.03 (Forbidden)

2.9 [RS1, Client4]

Client4 performs a DTLS-PSK handshake with RS1, submitting the following access
token through the psk-identity field as described in
https://tools.ietf.org/html/draft-ietf-ace-dtls-authorize-03#section-4.1 
(diagnostic notation):

{
  aud : "RS1",
  iss : "AS",
  scope : "HelloWorld",
  cnf : {
      COSE_KEY : {
          kty : Symmetric,
	  kid : h'91ECB5CB5DBF',
	  Octet_K : h'6162630405060708090A0B0C0D0E0F10' //can be random bytes
       }
   }
} 

The client then sends a GET request to the HelloWorld resource.

 C2.9.1 The access token is successfully processed by the authz-info resource
 C2.9.2 The request is granted and the HelloWorld resource returns
 	2.05 (Content) with the payload "HelloWorld" as CBOR String.


2.10 [RS2, Client2]

Client2 sends a CWT access token to RS2 encrypted with the shared key "RS2"
by the AS, containing the following claims (diagnostic notation):

{
  aud : "RS2",
  iss : "AS",
  scope : "r_Lock",
  cnf : {
      COSE_KEY : {
          kty : Symmetric,
	  kid : h'91ECB5CB5DBD',
	  Octet_K : h'6162630405060708090A0B0C0D0E0F10' //can be random bytes
       }
   }
} 

 C2.10 The request should be processed and answered with a 2.01 (Created)

2.11 [RS2, Client3]

Client3 sends a CWT access token to RS2 encrypted with the shared key "RS2"
by the AS, containing the following claims (diagnostic notation):

{
  aud : "RS2",
  iss : "AS",
  scope : "rw_Lock",
  cnf : {
      COSE_KEY : {
          kty : Symmetric,
	  kid : h'91ECB5CB5DBE',
	  Octet_K : h'6162630405060708090A0B0C0D0E0F10' //can be random bytes
       }
   }
} 

 C2.11 The request should be processed and answered with a 2.01 (Created)

2.12 [RS2, Client3]

Client3 sends a CWT access token to RS2 encrypted with the
shared key "RS2" by the AS, containing the following claims (diagnostic
notation):

{
  aud : "RS2",
  iss : "AS",
  scope : "HelloWorld",
  cnf : {
      COSE_KEY : {
          kty : EC2,
	  alg : ES256,
      	  crv : P-256,
	  x : h'12D6E8C4D28F83110A57D253373CAD52   
                F01BC447E4093541F643B385E179C110',
    	  y : h'283B3D8D28FFA59FE5CB540412A750FA   
                8DFA34F6DA69BCDA68400D679C1347E8'
    }       
  }
}

  C2.12  The request should be processed and answered with a 2.01 (Created)

2.13 [RS2, Client2]

After having sent the token to RS2  in test 2.10, Client2 performs a DTLS-PSK
handshake with RS2 using the key-id: h'91ECB5CB5DBD' as psk-identity
(corresponding to the kid in the token from test 2.10). Then Client2 sends a PUT
request to the Lock resource at RS2 with a CBOR payload of FALSE.

 C2.13 The request is denied with a 4.05 (Method Not Allowed)

2.14 [RS2, Client3]

After having sent the token to RS2 as in test 2.11, Client3 performs a DTLS-PSK
handshake with RS1 using the key-id: h'91ECB5CB5DBE' as psk-identity
(corresponding to the kid in the token from test 2.11). Then Client3 sends a PUT
request to the Lock resource at RS2 with a CBOR payload of FALSE.

 C2.14 The request is granted and the RS replies with a 2.04 Changed.

2.15 [RS2, Client3]

After having sent the token to RS2 as in test 2.12, Client3 performs a DTLS-RPK
handshake with RS2 using the raw public key:
"ni:///sha-256;xzLa24yOBeCkos3VFzD2gd83Urohr9TsXqY9nhdDN0w". RS2 uses the raw
public key:
"ni:///sha-256;sU09Kz-RXT8izVvD3n7v3d5vHVGF1NcYShZZ-oczcVE" in that handshake.
Then Client3 sends a GET request to the HelloWorld resource at RS2.

 C2.15 The request is granted and the HelloWorld resource returns
   2.05 (Content) with the payload "HelloWorld!" as CBOR String.

==== FIXME from here ====

5. Introspect Endpoint Tests

RS1 introspects an access token at the introspection endpoint

5.1 The RS is not authorized to use the introspection endpoint

 c18. The request should be rejected with 4.03 (Forbidden) and the
      error response should not contain any payload

5.2 The RS is authorized to use the introspection endpoint. The submitted token
is invalid (i.e. does not parse to a CWT)

 C19. The response should only contain the parameter active = false

5.3 The submitted token has expired

 C20. The response should only contain the parameter active = false

5.4 The submitted token is unknown to the AS (i.e. issued by another AS,
encrypted with an unknown key)

 C21.  The response should only contain the paramter active = false

5.5 The submitted token is valid for the scope "HelloWorld" and the
audience "RS1"

 C22. The response should contain the parameters active = true,
 aud = "RS1" and scope = "HelloWorld", optionally it may also contain
 other parameters like e.g. exp and iss.

