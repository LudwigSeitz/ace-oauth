I. Pre-requisites:

1. Client to AS DTLS PSK/RPK keys

Client1:
0x61, 0x62, 0x63, 0x04, 0x05, 0x06, 0x07, 0x08,
0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10

psk-identity="client1"

Client2:
0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10

psk-identity="client2".

Client3:
{1: 2, 3: -7, -1: 1,
-2: h'12D6E8C4D28F83110A57D253373CAD52F01BC447E4093541F643B385E179C110',
-3: h'283B3D8D28FFA59FE5CB540412A750FA8DFA34F6DA69BCDA68400D679C1347E8',
-4: h'00A43BAA7ED22FF2699BA62CA4999359B146F065A95C4E46017CD25EB89A94AD29'}

Or human readable:
{
  kty: EC2,
  alg: ES256,
  crv: P-256,
  x: h'12D6E8C4D28F83110A57D253373CAD52F01BC447E4093541F643B385E179C110',
  y: h'283B3D8D28FFA59FE5CB540412A750FA8DFA34F6DA69BCDA68400D679C1347E8',
  d: h'00A43BAA7ED22FF2699BA62CA4999359B146F065A95C4E46017CD25EB89A94AD29',
}

NI id: "ni:///sha-256;xzLa24yOBeCkos3VFzD2gd83Urohr9TsXqY9nhdDN0w"
(see RFC 6920 section 3 for calculation of NI).

AS raw public key:

{1: 2, 3: -7, -1: 1,
-2: h'058F35F3C0D34D3DF50DEBC82208CDA9BE373AF7B8F7AAC381577B144D5FA781',
-3: h'364269649744067D4600A529AE12076750D90C5EFCD9835137DB1AE2B4BACCB8',
-4: h'0089A92D07B34F1D806FABFF444AF6507C5F18F47BB2CCFAA7FBEC447303790D53'}

ni:///sha-256;IBEnVrQfrLp5gRu5jPHz7ykvkIPc4iW0CGE8Av20Nvo

RS2 raw public key:

{1: 2, 3: -7, -1: 1,
-2: h'73B7D755827D5D59D73FD4015D47B445762F7CDB59799CD966714AB2727F1BA5'
-3: h'1A84F5C82797643D33F7E6E6AFCF016522238CE430E1BF21A218E6B4DEEAC37A',
-4: h'00EA086573C683477D74EB7A0C63A6D031D5DEB10F3CC2876FDA6D3400CAA4E507'}

ni:///sha-256;sU09Kz-RXT8izVvD3n7v3d5vHVGF1NcYShZZ-oczcVE


2. Shared keys between RS and AS

RS1
0xa1, 0xa2, 0xa3, 0x04, 0x05, 0x06, 0x07, 0x08,
0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10

keyId : "RS1".

RS2
0xb1, 0xb2, 0xb3, 0x04, 0x05, 0x06, 0x07, 0x08,
0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10

keyId : "RS2".

3. All Access Tokens are assumed to be encoded as CWTs protected with the
following COSE wrapper (COSE_Encrypt0):

16([h'A1010A', {5: <IV here>}, <ciphertext here>])

Or human readable:

16({alg: AES-CCM-16-64-128}, {iv: <IV here>}, <ciphertext here>])

4. Portnumbers, endpoint names, profiles

We will use the default CoAP-DTLS port: 5684 for tests with the DTLS profile
and the default CoAP port: 5683 for tests with other profiles.

The Token endpoint will be reachable under the URL <your-IP-address>/token
The Introspection endpoint will be reachable under the URL
<your-IP-address>/introspect. The Authz-info endpoint  will be reachable under
the URL <your-IP-address>/authz-info

We will use CoAP as communication protocol and the DTLS profile
(draft-ietf-ace-dtls-authorize) unless another is explicitly named in the test
description.

Note that we do not (yet) mandate tests based on the MTI ed25519 curve, due to
lack of widespread library support.

5. Resources and Scopes

We will use two resources at the RS with the following URL and expected
behavior:

A. HelloWorld.  This resource only supports the GET method, and returns the
string: "Hello World!", it shall be reachable under the URL
<your-IP-address>/ace/helloWorld.

The scope "HelloWorld" shall allow to perform GET on this resource

B. Lock. This resource supports GET and PUT. GET returns the state of the lock
as CBOR Boolean value, where True stands locked and False for unlocked. The PUT
method allows to send a CBOR Boolean state to the lock, that the resource shall
store, overwriting its current state. This resource shall be reachable under the
URL <your-IP-address>/ace/lock.

The scope "r_Lock" shall allow to perform GET on this resource.
The scope "rw_Lock" shall allow to perform GET and PUT on this resource.

II. Tests

1. Unauthorized Resource Request

Client1 that does not have an access token, no PSK or RPK tries to send a GET
request to the protected HelloWorld resource at the RS using plain CoAP.

C1: Check that the client does not get access
C2: Check that the RS returns the AS information as specified in 5.1.2.

2. Token Endpoint Test

A client requests an access token at the token endpoint.

2.1

A client establishes a DTLS connection to the AS using the DTLS-RPK handshake
without client authentication. The client then sends a request (can be random
bytes) to the token endpoint.

 C3. The request should be rejected with 4.01 (Unauthorized) or 4.00 (Bad
 Request) and error = invalid_client
 
2.2 Client1 establishes a DTLS connection to the AS using the DTLS-PSK handshake
using the PSK "client1".
The client then sends a request (can be random bytes) to the token endpoint.
This client is not authorized to access the token endpoint (requires
configuration at the AS)

 C4. The request should be rejected with 4.00 (Bad Request) or 4.01
 (Unauthorized) and error = unauthorized_client
 
2.3 Client2 establishes a DTLS connection to the AS using the DTLS-PSK handshake
using the PSK "client2".
The client then sends a request to the token endpoint containing the following
parameters (and missing the 'aud' parameter):
{
  18 : 2       //  grant_type : client credentials
  12 : "HelloWorld"  //  scope : HelloWorld
}
No default audience is specified for this client, but this client is authorized
to access the token endpoint.

 C5. The request should be rejected with 4.00 (Bad Request) and
 error = invalid_request. The AS MAY provide the explanation that the audience
 is missing.

2.4 Client3 establishes a DTLS connection to the AS using the DTLS-RPK handshake
using the RPK: "ni:///sha-256;xzLa24yOBeCkos3VFzD2gd83Urohr9TsXqY9nhdDN0w".
The client sends a request to the token endpoint containing the following
parameters (and missing the 'scope' parameter):
{
  18 : 2       //  grant_type : client credentials
  3  : "RS1"   //  aud : RS1
}
No default scope is specified for this client, but this client is authorized
to access the token endpoint.

 C6. The request should be rejected with 4.00 (Bad Request) and
 error = invalid_request. The AS MAY provide the explanation that the
 scope is missing.

2.5 Client2 establishes a DTLS connection to the AS using the DTLS-PSK handshake
using the PSK "client2".

The client then sends a request to the token endpoint containing the following
parameters:
{
  18 : 2       //  grant_type : client credentials
  12 : "HelloWorld"  //  scope : HelloWorld
   3 : "RS1"   //  aud : RS1
  25 : {1:                               // cnf : { COSE_KEY : {
    {2: h'91ECB5CB5DBC',                 //   kid :  ....
     1: 4,                               //   kty : Symmetric
    -1: h'6162630405060708090A0B0C0D0E0F10' // Octet_K  : ...
    }       
  }
}
The client is authorized to access the token endpoint and is authorized
to request the scope "HelloWorld" on "RS1".

 C7. The request should be rejected with 4.00 (Bad Request) and
 error = invalid_request. The AS MAY provide the explanation that the
 client is not supposed to submit a symmetric confirmation key.

2.6 Client3 establishes a DTLS connection to the AS using the DTLS-RPK handshake
using the RPK: "ni:///sha-256;xzLa24yOBeCkos3VFzD2gd83Urohr9TsXqY9nhdDN0w".

The client sends a request to the token endpoint containing the following
parameters:
{
  18 : 2       //  grant_type : client credentials
  12 : "HelloWorld"  //  scope : HelloWorld
   3 : "RS1"   //  aud : RS1
  25 : {1:     // cnf : { COSE_KEY : {
    { 1: 2,    // kty : EC2,
      3: -7,   // alg : ES256,
      -1: 1,   // crv : P-256,
      -2: h'12D6E8C4D28F83110A57D253373CAD52   // x : ...
            F01BC447E4093541F643B385E179C110',
      -3: h'283B3D8D28FFA59FE5CB540412A750FA   // y : ...
            8DFA34F6DA69BCDA68400D679C1347E8'
    }       
  }
}
The client is authorized to access the token endpoint and is authorized
to request the scope "HelloWorld" on "RS1". The RS "RS1" is registered a the AS
and does not support DTLS-RPK.

 C8. The request should be rejected with 4.00 (Bad Request) and
 error = unsupported_pop_key

2.7 Client2  establishes a DTLS connection to the AS using the DTLS-PSK handshake
using the PSK "client2". The client then sends a request to the token endpoint containing the following parameters:
{
  18 : 0      //  grant_type : password
  12 : "HelloWorld"  //  scope : HelloWorld
   3 : "RS1"   //  aud : RS1
}
The client is authorized to access the token endpoint and is authorized
to request the scope "HelloWorld" on "RS1". The AS does not support the
grant type "password".

  C9. The request should be rejected with 4.00 (Bad Request) and
 error = unsupported_grant_type

2.8 Client2  establishes a DTLS connection to the AS using the DTLS-PSK handshake
using the PSK "client2". The client then sends a request to the token endpoint
containing the following parameters:
{
  18 : 2       //  grant_type : client credentials
  12 : "test"  //  scope : test
   3 : "RS1"   //  aud : RS1
}

The client is authorized to access the token endpoint and is authorized
to request the scope "HelloWorld" on "RS1". The scope "test" is unknown to
the AS.

  C10. The request should be rejected with 4.00 (Bad Request) and
 error = invalid_scope

2.9 Client2  establishes a DTLS connection to the AS using the DTLS-PSK handshake
using the PSK "client2". The client then sends a request to the token endpoint
containing the following parameters:
{
  18 : 2      //  grant_type : client credentials
  12 : "HelloWorld"  //  scope : HelloWorld
   3 : "RS1"   //  aud : RS1
}
The client is authorized to access the token endpoint and is authorized
to request the scope "HelloWorld" on "RS1". Client2 and RS1 support
DTLS-PSK with 128-bit keys and the DTLS profile. The AS and RS1 share the key: "RS1" for encrypting the CWT.

 C11.  The request should be granted and an access token returned.
  The access token should use the PSK "RS1" for the Encrypt0 wrapper
 C12. The token should contain the cnf claim containing a symmetric
 128-bit PSK generated by the AS, the token should also contain aud="RS1" and
 scope="HelloWorld".
 C13. The RS Information should contain the cnf claim with the same key
 as in the cnf claim of the token. The RS information MAY contain a profile
 claim (26 : 1  unabbreviated: profile : "coap_dtls").

2.10 Client3 establishes a DTLS connection to the AS using the DTLS-RPK handshake
using the RPK: "ni:///sha-256;xzLa24yOBeCkos3VFzD2gd83Urohr9TsXqY9nhdDN0w". 

The client sends a request to the token endpoint containing the following
parameters:
{
  18 : 2       //  grant_type : client credentials
  12 : "HelloWorld"  //  scope : HelloWorld
   3 : "RS2"   //  aud : RS2
  25 : {1:     // cnf : { COSE_KEY : {
    { 1: 2,    // kty : EC2,
      3: -7,   // alg : ES256,
      -1: 1,   // crv : P-256,
      -2: h'12D6E8C4D28F83110A57D253373CAD52   // x : ...
            F01BC447E4093541F643B385E179C110',
      -3: h'283B3D8D28FFA59FE5CB540412A750FA   // y : ...
            8DFA34F6DA69BCDA68400D679C1347E8'
    }       
  }
}
The client is authorized to access the token endpoint and is authorized
to request the scope "HelloWorld" on "RS2". The RS "RS2" is registered a the AS
and does support DTLS-RPK. The public key of RS2 is:
ni:///sha-256;sU09Kz-RXT8izVvD3n7v3d5vHVGF1NcYShZZ-oczcVE.

AS and RS2 share symmetric key "RS2".

 C14. Check that the client authenticates to the AS in the RPK handshake
 C15. Check that cnf claim in the access token contains the client's raw
      public key
 C16. Check that the RS information contains the rs_cnf parameter,
      containing the RS's public key

==== FIXME from here ====
3. Authorization Information Endpoint Tests

A client POSTs a message to the authz-info endpoint at RS1

3.1 A client sends random bytes to the authz-info endpoint

 C23. The request should be rejected with 4.01 (Unauthorized).

3.2 A client sends a token encrypted with an unknown key

 C24. The request should be rejected with 4.01 (Unauthorized).

3.3 Client2 sends a token that comes from a recognized AS encrypted with the
shared key "RS1", but with an audience claim that does not match RS1 (e.g. "RS2").

 C25. The request should be rejected with 4.03 (Forbidden).

3.4 The client sends an otherwise valid token that contains an unknown
    scope

 C26. The request should be rejected with 4.00 (Bad Request).

3.5  The client sends a valid token with a matching audience and
     known scope.

 C27. The request should be processed and answered with a 2.01 (Created)

4. Access Requests with Tokens Tests

4.1 The client sends a GET request to HelloWorld after having submitted a matching token
to authz-info (scope="HelloWorld"). The client performs the proof-of-possession correctly.
The token shall use the common PSK as pop-key and the DTLS-PSK handshake shall be used as
proof-of-possession.

 C28. The request is granted and the HelloWorld resource returns "HelloWorld!"

4.2 The client sends a PUT request to the Lock resource after having submitted a token
that applies to the HelloWorld resource (scope="HelloWorld")

 C29. The request is denied with a 4.03 (Forbidden)

4.3 The client sends a PUT request to the Lock resource after having submitted a token
that applies to the Lock resource but only allows GET (scope="r_Lock").

 C30. The request is denied with a 4.05 (Method Not Allowed)

4.4 The client sends a PUT request to the Lock resource after having submitted a token
that applies to the Lock resource and allow GET and PUT (scope="rw_Lock").
The token shall use the client RPK as pop-key and the DTLS-RPK handshake with client
authentication as proof-of-possession. The RS shall use the RS key for server authentication.

 C31. The request is granted and the RS replies with a 2.04 Changed.

4.5 The client sends a GET request to the HelloWorld resource, submitting the matching token
(scope="HelloWorld"), through the psk-identity in the DTLS-PSK handshake, using the common PSK as
pop-key. See https://tools.ietf.org/html/draft-ietf-ace-dtls-authorize-03#section-4.1.

 C32. The request is granted and the HelloWorld resource returns "HelloWorld"

5. Introspect Endpoint Tests

RS1 introspects an access token at the introspection endpoint

5.1 The RS is not authorized to use the introspection endpoint

 c18. The request should be rejected with 4.03 (Forbidden) and the
      error response should not contain any payload

5.2 The RS is authorized to use the introspection endpoint. The submitted token
is invalid (i.e. does not parse to a CWT)

 C19. The response should only contain the parameter active = false

5.3 The submitted token has expired

 C20. The response should only contain the parameter active = false

5.4 The submitted token is unknown to the AS (i.e. issued by another AS,
encrypted with an unknown key)

 C21.  The response should only contain the paramter active = false

5.5 The submitted token is valid for the scope "HelloWorld" and the
audience "RS1"

 C22. The response should contain the parameters active = true,
 aud = "RS1" and scope = "HelloWorld", optionally it may also contain
 other parameters like e.g. exp and iss.

