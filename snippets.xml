    <t>CoAP specifies three security modes of DTLS: PreSharedKey, RawPublicKey
    and Certificate.  The same modes can be used with TLS.  The client is to
    infer from the type of key provided, which (D)TLS mode the RS supports as
    follows.</t>

    <t>If PreSharedKey mode is used, the AS MUST provide the client with 
    the pre-shared key to be used with the RS.  This key MUST be the same as
    the PoP key (i.e. a symmetric kew IA$31fea
y as in section 4 of <xref
    target="I-D.ietf-oauth-pop-key-distribution"/>).</t>

    <t>The client MUST use the PoP key as DTLS pre-shared key.  The client 
    MUST furthermore use the "kid" parameter provided as part of the 
    JWK/COSE_Key as the psk_identity in the DTLS handshake <xref 
    target="RFC4279"/>.  How the AS and the RS determine the values of the kid
    parameter is out of scope for this specification, but the AS MUST use a
    kid that makes it possible for the RS to select the correct key.</t>
    
    <t>If RawPublicKey mode is used, the AS MUST provide the client with 
    the RS's raw public key using the "rpk" parameter defined in the
    following.  This parameter MUST contain a JWK or a COSE_Key.  The client
    MUST provide a raw public key to the AS, and the AS MUST use this key as
    PoP key in the token.  The token MUST thus use asymmetric keys for the 
    proof-of-possession.  Note that the PoP key distribution specification
    <xref target="I-D.ietf-oauth-pop-key-distribution"/> defines how the
    client can transfer its key as a JWK datastructure.  This specification
    RECOMMENDS to use a COSE_Key structure instead.  This specification refers
    to section 9.1.3.2.1. of CoAP <xref target="RFC7252"/> for recommendations
    on how to generate the kid for a raw public key.</t>
    
    <t>In order to get the proof-of-possession a RS configured to use this
    mode together with PoP tokens MUST require client authentication in the 
    DTLS handshake.  The client MUST use the raw public key bound to the
    PoP token for client authentication in DTLS.</t>    
  
    <t>TLS or DTLS with certificates MAY make use of pre-established trust
    anchors or MAY be configured more tightly with additional client
    information parameters, such as x5c, x5t, or x5t#S256. An overview of
    these parameters is given below.</t>

    <t hangText="X.509 Certificate Chain (x5c)"><vspace blankLines="1"/>
    For when communication security is based on certificates this attribute
    can be used to define the server certificate or CA certificate.
    Semantics for this attribute is defined by <xref target="RFC7517"/> or
    COSE_Key <xref target="I-D.ietf-cose-msg"/>.</t>
   
    <t hangText="X.509 Certificate Thumbprint (x5t and x5t#S256)">
    <vspace blankLines="1"/>
    For when communication security is based on certificates this attribute
    can be used to define the specific server certificate to expect or the CA
    certificate.  Semantics for this attribute is defined by JWK/COSE_Key.</t>
                   
    <t>To use object security (such as OSCOAP and OSCON) requires security
    context to be established, which can be provisioned with PoP token and
    client information, or derived from that information. Object security
    specifications designed to be used with this protocol MUST specify the
    parameters that an AS has to provide to the client in order to set up
    the necessary security context.</t>
  
    <t>Table <xref target="tab:cspSummary"/> summarizes the additional
    parameters defined here for use by the client or the AS in the
    PoP token request protocol.</t>
    <t><figure align="center" anchor="tab:cspSummary"
               title="Table of additional parameters defined for the
		      PoP protocol.">
      <artwork align="left"><![CDATA[
   /-----------+--------------+----------------------------------\
   | Parameter | Used by      | Description                      |
   |-----------+--------------+----------------------------------|
   | csp       | client or AS | Communication security protocol  |
   | rpk       | AS           | RS's raw public key              |
   | x5c       | AS           | RS's X.509 certificate chain     |
   | x5t       | AS           | RS's SHA-1 cert thumb print      |
   | x5t#S256  | AS           | RS's SHA-256 cert thumb print    |
   \-----------+--------------+----------------------------------/
      ]]></artwork>
    </figure></t>
=============================================================================================

  <section anchor="oauth2ProfilesCoAPAccessTokenOption"
           title="CoAP Access-Token Option">
    <t> OAuth 2.0 access tokens are usually transferred as authorization 
    	header. CoAP has no authorization header equivalence. This document 
    	therefore registers the option Access-Token. The Access-Token option 
    	is an alternative for transferring the access token when it is smaller 
    	then 255 bytes. If token is larger the 255 bytes lager authorization 
    	information resources MUST at the RS be user when CoAP.
    </t>
  </section>

=========================================================================================
<section anchor="oauth2ProfilesAuthzInfo"
           title="Authorization Information Resource at the Resource Server">
    <t>A consequence of allowing the use of CoAP as web transfer protocol
      is that we cannot rely on HTTP specific mechanisms, such as
      transferring information elements in HTTP headers since those are not
      necessarily gracefully mapped to CoAP.  In case the access token is
      larger than 255 bytes it should not be sent as a CoAP option.
    </t>
    <t>For conveying authorization information to the RS a new resource is 
      introduced to which the PoP tokens can be sent to
      convey authorization information before the first resource request is made
      by the client.  This specification calls this resource "/authz-info"; the 
      URI may, however, vary in deployments.
    </t>
    <t>The RS needs to store the PoP token for when later
      authorizing requests from the client. The RS is not mandated 
      to be able to manage multiple client at once. how the RS manages 
      clients is out of scope for this specification.
    </t>

    <section anchor="authzInfoResourceRequest" 
             title="Authorization Information Request">
    <t>The client makes a POST request to the authorization information
      resource by sending its PoP token as request data.</t>
    <t>Client MUST send the Content-Format option indicate token format</t>
    <!-- TODO insert Content-Format -->

    </section>
      <section anchor="authzInfoResourceResponse" 
               title="Authorization Information Response">
        <t>The RS MUST resonde to a requests to the authorization 
          information resource. The response MUST match CoAP response 
          codes according to success or error response section</t>

      <section anchor="authzInfoResourceSuccessResponse"
               title="Success Response">
        <t>Successful requests MUST be answered with 2.01 
          Created to indicate that a "session" for the PoP 
          Token has been created. No location path is 
          required to be returned.
        </t>
        <t>
          <figure align="center" anchor="fig:clientRSAuthzInfoSuccess"
                   title="Authorization Information Resource Success Response">
            <artwork align="left"><![CDATA[
          Resource
  Client   Server
    |         |
    |         |
A:  +-------->| Header: POST (Code=0.02)
    | POST    | Uri-Path: "/authz-info"
    |         | Content-Format: "application/cwt"
    |         | Payload: <PoP Token>
    |         |
B:  |<--------+ Header: 2.01 Created
    | 2.01    | 
    |         | 
        ]]>
            </artwork>
          </figure>
        </t>
      </section>

      <section anchor="authzInfoResourceErrorResponse"
               title="Error Response">
        <t>The resource server MUST user appropriate CoAP 
          response code to convey the error to the Client.
          For request that are not valid, e.g. unknown Content-Format, 
          4.00 Bad Request MUST be returned. If token is not valid, 
          e.g. wrong audience, the RS MUST return 4.01 Unauthorized.
        </t>
        <t>
          <figure align="center" anchor="fig:clientRSAuthzInfoError"
                   title="Authorization Information Resource Error Response">
            <artwork align="left"><![CDATA[
          Resource
  Client   Server
    |         |
    |         |
A:  +-------->| Header: POST (Code=0.02)
    | POST    | Uri-Path: "/authz-info"
    |         | Content-Format: "application/cwt"
    |         | Payload: <PoP Token>
    |         |
B:  |<--------+ Header: 4.01 Unauthorized
    | 2.01    | 
    |         | 
        ]]>
            </artwork>
          </figure>
        </t>
      </section>
    </section>
  </section>
